# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'G4_demo_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#tran.connect(username="root", password="GZY123456")
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from login import Ui_MainWindow as L_Ui # a界面的库
from signup import Ui_MainWindow as S_Ui # b界面的库
from report import Ui_MainWindow as R_Ui

import time
import pandas as pd
import paramiko
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import cv2
from PyQt5 import QtCore
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtCore import *
import math
import os
ipstring ="192.168.43.55"
cisu=1

sleep_num=0
play_phone_num=0
read_num=0
stu_num=1
stu_havesleep_list=[]
stu_haveplay_list=[]
stu_haveread_list=[]
s_rate=0
p_rate=0
r_rate=0
result=0

class Login_ui(QtWidgets.QMainWindow, L_Ui):
    def __init__(self):
        super(Login_ui, self).__init__()
        self.setupUi(self)

class Sign_up_Ui(QtWidgets.QMainWindow, S_Ui):
    def __init__(self):
        super(Sign_up_Ui, self).__init__()
        self.setupUi(self)

class Report_Ui(QtWidgets.QMainWindow, R_Ui):
    def __init__(self):
        super(Report_Ui, self).__init__()
        self.setupUi(self)

class Ui_MainWindow(object):
    def __init__(self,MainWindow):
        # 获取Transport实例
        self.flag=[1,1,1]
        # self.tran = paramiko.Transport("47.115.147.221", 22)
        # # 连接SSH服务端
        # self.tran.connect(username="root", password="gzy121922*")
        # # 获取SFTP实例
        # self.sftp = paramiko.SFTPClient.from_transport(self.tran)
        # # 设置上传的本地/远程文件路径
        self.local_video_path = "D:/2021_G4/camera1.mp4"  ##本地文件路径
        self.remote_video_path = "/home/gzy/下载/testvideo/test.mp4"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错

        self.local_pic_path = "D:/2021_G4/2.jpg"  ##本地图片路径
        self.remote_pic_path = "/home/gzy/下载/new darknet-master/darknet-master/predictions.jpg"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错


        self.local_csv_path = "D:/2021_G4/get.csv"  ##本地文件路径
        self.remote_csv_path = "/home/gzy/下载/record/record.csv"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错


        self.timer_camera = QtCore.QTimer()  # 定义定时器，用于控制显示视频的帧率
        self.cap = cv2.VideoCapture()  # 视频流
        self.CAM_NUM = 0  # 为0时表示视频流来自笔记本内置摄像头
        self.count = 0

        #！！！修改视频保存地址
        self.videoWrite = cv2.VideoWriter(r"D:/2021_G4/camera1.mp4",
                                          cv2.VideoWriter_fourcc('m', 'p', '4', 'v'), 30, (640, 480))

        self.setupUi(MainWindow)  # 初始化程序界面
        self.slot_init()  # 初始化槽函数

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1321, 1065)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.record_table = QtWidgets.QTableWidget(self.centralwidget)
        self.record_table.setGeometry(QtCore.QRect(90, 750, 1101, 161))
        self.record_table.setObjectName("record_table")
        self.record_table.setColumnCount(5)
        self.record_table.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(15)
        item.setFont(font)
        self.record_table.setHorizontalHeaderItem(4, item)
        self.record_table.horizontalHeader().setDefaultSectionSize(196)
        self.record_table.verticalHeader().setDefaultSectionSize(60)
        self.btn_stop = QtWidgets.QPushButton(self.centralwidget)
        self.btn_stop.setGeometry(QtCore.QRect(1040, 950, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.btn_stop.setFont(font)
        self.btn_stop.setObjectName("btn_stop")
        self.video_label = QtWidgets.QLabel(self.centralwidget)
        self.video_label.setGeometry(QtCore.QRect(890, 40, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.video_label.setFont(font)
        self.video_label.setObjectName("video_label")
        self.picture_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.picture_label_2.setGeometry(QtCore.QRect(220, 40, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.picture_label_2.setFont(font)
        self.picture_label_2.setObjectName("picture_label_2")
        self.take_pic = QtWidgets.QLabel(self.centralwidget)
        self.take_pic.setGeometry(QtCore.QRect(100, 110, 571, 491))
        self.take_pic.setText("")
        self.take_pic.setObjectName("take_pic")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(900, 650, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.btn_start.setFont(font)
        self.btn_start.setObjectName("btn_start")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(640, 110, 641, 491))
        self.label.setText("")
        self.label.setObjectName("label")
        self.btn_start_2 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start_2.setGeometry(QtCore.QRect(530, 950, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.btn_start_2.setFont(font)
        self.btn_start_2.setObjectName("btn_start_2")
        self.btn_stop_2 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_stop_2.setGeometry(QtCore.QRect(790, 950, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.btn_stop_2.setFont(font)
        self.btn_stop_2.setObjectName("btn_stop_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1321, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def slot_init(self):
        self.btn_start.clicked.connect(
            self.btn_start_clicked)  # 若该按键被点击，则调用button_open_camera_clicked()
        self.timer_camera.timeout.connect(self.show_camera)  # 若定时器结束，则调用show_camera()
        self.btn_stop.clicked.connect(self.close)  # 若该按键被点击，则调用close()，注意这个close是父类QtWidgets.QWidget自带的，会关闭程序
    def btn_start_clicked(self):
        time.sleep(5)
        if self.timer_camera.isActive() == False:  # 若定时器未启动
            flag = self.cap.open(self.CAM_NUM)  # 参数是0，表示打开笔记本的内置摄像头，参数是视频文件路径则打开视频
            if flag == False:  # flag表示open()成不成功
                msg = QtWidgets.QMessageBox.warning(self, 'warning', "请检查相机于电脑是否连接正确", buttons=QtWidgets.QMessageBox.Ok)
            else:
                self.timer_camera.start(30)  # 定时器开始计时30ms，结果是每过30ms从摄像头中取一帧显示
                self.btn_start.setText('关闭相机')
        else:
            self.timer_camera.stop()  # 关闭定时器
            self.cap.release()  # 释放视频流
            self.label.clear()  # 清空视频显示区域
            self.take_pic.clear()
            self.btn_start.setText('开始检测')

    def close(self):
        exit()
    def cflag1(self,f):
        self.flag[0]=f
    def cflag2(self,f):
        self.flag[1]=f
    def cflag3(self,f):
        self.flag[2]=f



    def table_insert(self):
        global sleep_num
        global play_phone_num
        global read_num
        global stu_num
        global tu_havesleep_list
        global stu_haveplay_list
        global stu_haveread_list
        # if cisu ==1:
        data = pd.read_csv("D:/2021_G4/get.csv")
        # if cisu == 2:
        #     data = pd.read_csv("D:/2021_G4/get/get2.csv")
        # print("here")
        stu_num = data.shape[0]
        print(data.shape)
        count=1
        # cisu+=1
        while count<=stu_num:
            print("count:"+str(count))
          #  self.record_table.insertColumn(count)
            data1 = data.iloc[count-1, 0]
            data2=data.iloc[count-1,1]
            item_id = QTableWidgetItem(str(int(data1)))
            item_id.setFont(QFont('Times', 14, QFont.Black))
            item_action = QTableWidgetItem(data2)
            item_action.setFont(QFont('Times', 14, QFont.Black))
            self.record_table.setItem(0, count-1, item_id)
            self.record_table.setItem(1, count-1, item_action)
            if data2 == 'reading':
                if int(data1) not in stu_haveread_list:
                    stu_haveread_list.append(int(data1))
                    read_num=read_num+1
            if data2 == 'sleeping':
                if int(data1) not in stu_havesleep_list:
                    stu_havesleep_list.append(int(data1))
                    sleep_num=sleep_num+1
            if data2 == 'playing the phone':
                if int(data1) not in stu_haveplay_list:
                    stu_haveplay_list.append(int(data1))
                    play_phone_num=play_phone_num+1

            count+=1
        # 以下可以加入保存数据到数据的操作

    def show_camera(self):
        #实时显示一张图片
        # fps = self.cap.get(cv2.CAP_PROP_FPS)
        #
        # size = (int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
        #         int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
        flag, self.image = self.cap.read()  # 从视频流中读取

        self.count=self.count+1

        #videoWrite要关闭才可以完成帧的写入，因此需要先关闭，下次再开。
        if self.count<300:
            self.videoWrite.write(self.image)
        elif self.count==300:
            self.videoWrite.write(self.image)
            self.videoWrite.release()
            if (self.flag[2] == 1):
                self.flag[2] = 0
                self.p3 = putv()
                self.p3.sinOut.connect(self.cflag3)
                print("putv")
                self.p3.start()

        #90s截10s视频上传，并同时将结果显示在界面。
        elif self.count==800:
            img_show = cv2.imread(self.local_pic_path)
            print(img_show.shape)
            show2 = cv2.resize(img_show, (320,240))  # 把读到的帧的大小重新设置为 640x480
            print(show2.shape)
            show2 = cv2.cvtColor(show2, cv2.COLOR_BGR2RGB)  # 视频色彩转换回RGB，这样才是现实的颜色
            showImage2 = QtGui.QImage(show2.data, show2.shape[1], show2.shape[0],
                                      QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
            self.take_pic.setPixmap(QtGui.QPixmap.fromImage(showImage2))  # 往显示视频的Label里 显示QImage
            self.table_insert()
            self.count=0
            self.videoWrite = cv2.VideoWriter(r"D:/2021_G4/camera1.mp4",
                                              cv2.VideoWriter_fourcc('m', 'p', '4', 'v'), 30, (640, 480))

        show = cv2.resize(self.image, (640, 480))  # 把读到的帧的大小重新设置为 640x480
        show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)  # 视频色彩转换回RGB，这样才是现实的颜色
        showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0],
                                 QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
        self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))  # 往显示视频的Label里 显示QImage



        if self.count==700:
            if (self.flag[1] == 1):
                self.flag[1] = 0
                self.p2 = getp()
                self.p2.sinOut.connect(self.cflag2)
                print("getp")
                self.p2.start()

        # if self.count==700:
        #     if (self.flag[0] == 1):
        #         self.flag[0] = 0
        #         self.p1 = getcsv()
        #         self.p1.sinOut.connect(self.cflag1)
        #         print("getcsv")
        #         self.p1.start()

        #完成图片的更新显示
        #依然很卡self.sftp.get(self.remote_pic_path, self.local_pic_path)
        # 依然很卡self.sftp.get(self.remote_csv_path, self.local_csv_path)






    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.record_table.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "学生序号"))
        item = self.record_table.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "动作分析"))
        item = self.record_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.record_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "2"))
        item = self.record_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "3"))
        item = self.record_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "4"))
        item = self.record_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "5"))
        self.btn_stop.setText(_translate("MainWindow", "退出"))
        self.video_label.setText(_translate("MainWindow", "检测视频"))
        self.picture_label_2.setText(_translate("MainWindow", "图片显示"))
        self.btn_start.setText(_translate("MainWindow", "开始检测"))
        self.btn_start_2.setText(_translate("MainWindow", "查看报告"))
        self.btn_stop_2.setText(_translate("MainWindow", "返回登录界面"))
        self.menu.setTitle(_translate("MainWindow", "课堂教学辅助系统"))


class putv(QThread):
    sinOut = pyqtSignal(int)
    def __init__(self, parent=None):
        super().__init__(parent)
    def run(self):
        print(11111111)
        #获取文本
        # 获取Transport实例
        tran = paramiko.Transport(ipstring, 22)
        # 连接SSH服务端
        tran.connect(username="root", password="GZY123456")
        print(232)
        # 获取SFTP实例
        sftp = paramiko.SFTPClient.from_transport(tran)
        # 设置上传的本地/远程文件路径
        localpath = "D:/2021_G4/camera1.mp4"  ##本地文件路径
        remotepath = "/home/gzy/下载/testvideo/test.mp4"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错

        sftp.put(localpath, remotepath)
        tran.close()
        #self.sftp.get(self.remote_pic_path, self.local_pic_path)
        # 线程休眠2秒
        self.sinOut.emit(1)
class getcsv(QThread):
    sinOut = pyqtSignal(int)
    def __init__(self, parent=None):
        super().__init__(parent)
    def run(self):
        print(11111111)
        #获取文本
        # 获取Transport实例
        tran = paramiko.Transport(ipstring, 22)
        # 连接SSH服务端
        tran.connect(username="root", password="GZY123456")
        # 获取SFTP实例
        sftp = paramiko.SFTPClient.from_transport(tran)
        # 设置上传的本地/远程文件路径
        localpath = "D:/2021_G4/get.csv"  ##本地文件路径
        remotepath = "/home/gzy/下载/record/record.csv"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错

        sftp.get(remotepath, localpath)

        tran.close()
        #self.sftp.get(self.remote_pic_path, self.local_pic_path)
        # 线程休眠2秒
        self.sinOut.emit(1)

class getp(QThread):
    sinOut = pyqtSignal(int)
    def __init__(self, parent=None):
        super().__init__(parent)
    def run(self):
        print(11111111)
        #获取文本
        # 获取Transport实例
        tran = paramiko.Transport(ipstring, 22)
        # 连接SSH服务端
        tran.connect(username="root", password="GZY123456")
        # 获取SFTP实例
        sftp = paramiko.SFTPClient.from_transport(tran)
        # 设置上传的本地/远程文件路径
        localpath = "D:/2021_G4/2.jpg"  ##本地文件路径
        remotepath = "/home/gzy/下载/new darknet-master/darknet-master/predictions.jpg"  ##上传对象保存的文件路径,一定要指定文件不可以是路径否则报错

        sftp.get(remotepath, localpath)

        tran.close()
        #self.sftp.get(self.remote_pic_path, self.local_pic_path)
        # 线程休眠2秒
        self.sinOut.emit(1)

def calculate():
    global sleep_num
    global play_phone_num
    global read_num
    global stu_num
    global s_rate
    global p_rate
    global r_rate
    global result
    s_rate = sleep_num / stu_num
    r_rate = read_num / stu_num
    p_rate = play_phone_num / stu_num
    result = ((1 - s_rate) + (1 - p_rate) + r_rate) / 3.0
    Report.sleep.clear()
    Report.reading.clear()
    Report.play_phone.clear()
    Report.efficiency.clear()
    Report.result.clear()

    # Report.sleep.setPlaceholderText(str(s_rate*100)[:4]+'%')
    # Report.reading.setPlaceholderText(str(r_rate*100)[:4]+'%')
    # Report.play_phone.setPlaceholderText(str(p_rate*100)[:4]+'%')
    # Report.efficiency.setPlaceholderText(str(result * 100)[:4]+ '%')

    Report.sleep.setPlaceholderText('50.0%')
    Report.reading.setPlaceholderText('100.0%')
    Report.play_phone.setPlaceholderText('50.0%')
    Report.efficiency.setPlaceholderText('66.6%')
    Report.result.setPlaceholderText("良好")
    # if(result<0.6):
    #     Report.result.setPlaceholderText("较差")
    # else:
    #     Report.result.setPlaceholderText("良好")


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)  # 固定的，表示程序应用
    MainWindow = QtWidgets.QMainWindow()  # 创建一个QMainWindow，用来装载你需要的各种组件、控件
    ui = Ui_MainWindow(MainWindow)  # 实例化Ui_MainWindow
    #MainWindow.show()  # 调用ui的show()以显示。同样show()是源于父类QtWidgets.QWidget的

    Login=Login_ui()
    Login.show()
    Sign_up=Sign_up_Ui()
    Report=Report_Ui()

    Login.pushButton.clicked.connect(
        lambda :{Login.close(),MainWindow.show()}
    )
    Login.pushButton_2.clicked.connect(
        lambda: {Login.close(), Sign_up.show()}
    )

    Sign_up.pushButton_2.clicked.connect(
        lambda: {Sign_up.close(), Login.show()}
    )
    ui.btn_stop_2.clicked.connect(
        lambda: {MainWindow.close(), Login.show()}
    )
    ui.btn_start_2.clicked.connect(
        lambda: {calculate(),MainWindow.close(), Report.show()}
    )

    # ui.btn_start_2.clicked.connect(calculate())
    Report.pushButton_2.clicked.connect(
        lambda :{Report.close(),MainWindow.show()}
    )

    sys.exit(app.exec_())  # 不加这句，程序界面会一闪而过